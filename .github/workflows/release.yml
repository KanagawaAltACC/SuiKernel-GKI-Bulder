name: Release Build

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        variant:
          - { name: "Non-KSU", KSU: "None", KSU_SUSFS: "false", KSU_MANUAL_HOOK: "false", LAST_BUILD: "false" }
          - { name: "KSUN-Only", KSU: "Next", KSU_SUSFS: "false", KSU_MANUAL_HOOK: "true", LAST_BUILD: "false" }
          - { name: "KSUN+SuSFS", KSU: "Next", KSU_SUSFS: "true", KSU_MANUAL_HOOK: "true", LAST_BUILD: "false" }
          - { name: "SUKISU-Only", KSU: "Suki", KSU_SUSFS: "false", KSU_MANUAL_HOOK: "false", LAST_BUILD: "false" }
          - { name: "SUKISU+SuSFS", KSU: "Suki", KSU_SUSFS: "true", KSU_MANUAL_HOOK: "true", LAST_BUILD: "false" }
          - { name: "RKSU-Only", KSU: "Rissu", KSU_SUSFS: "false", KSU_MANUAL_HOOK: "true", LAST_BUILD: "false" }
          - { name: "RKSU+SuSFS", KSU: "Rissu", KSU_SUSFS: "true", KSU_MANUAL_HOOK: "true", LAST_BUILD: "true" }
    name: Build ${{ matrix.variant.name }} variant
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      KSU: ${{ matrix.variant.KSU }}
      KSU_SUSFS: ${{ matrix.variant.KSU_SUSFS }}
      KSU_MANUAL_HOOK: ${{ matrix.variant.KSU_MANUAL_HOOK }}
      LAST_BUILD: ${{ matrix.variant.LAST_BUILD }}
      BUILD_BOOTIMG: "true"
      TODO: "kernel"

  release:
    name: Create Unified Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_files

      - name: Extract variables from info.txt
        env:
            TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
            TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          set -e  # Exit on error
          source functions.sh # We need error() function
          info_file="release_files/info-${{ github.run_number }}/info.txt"

          if [[ -f "$info_file" ]]; then
            while IFS='=' read -r key value; do
              key=$(echo -n "$key" | tr -d ' ')
              value=$(echo -n "$value" | tr -d ' ')
              echo "$key=$value" # for debugging
              echo "$key=$value" >> $GITHUB_ENV
            done < "$info_file"
            rm -f "$info_file"
          else
            error "error: info.txt not found!"
          fi

      - name: Generate release tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
            LATEST_TAG="$(gh api repos/$RELEASE_REPO/tags --jq '.[0].name')"

            # Handle case when $LATEST_TAG doesn't contain $KERNEL_NAME
            if ! echo "$LATEST_TAG" | grep -q "$KERNEL_NAME"; then
                RELEASE_TAG="$KERNEL_NAME-r0"
            else
                RELEASE_TAG="$LATEST_TAG"
            fi

            RELEASE_TAG="$(echo "$RELEASE_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')"

            echo "Release tag: $RELEASE_TAG"
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

      - name: Upload All Builds to release repo
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ env.RELEASE_REPO }}
          name: ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          prerelease: true
          files: release_files/**/*
          body: |
            ## 📢 ${{ env.RELEASE_TAG }} Builds
            -> Linux ${{ env.LINUX_VERSION }} (android12-5.10-lts)
            -> KSUNext ${{ env.KSU_NEXT_VERSION }}
            -> SukiKSU ${{ env.SUKISU_VERSION }}
            -> SUSFS ඞ ${{ env.SUSFS_VERSION }}

            #### ✍️ Notes
            -> This kernel only for GKI android12-5.10 device
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Send notification to TG
        run: |
          source ./functions.sh
          send_msg "📦 Release completed! [Click](https://github.com/${{ env.RELEASE_REPO }}/releases/tag/${{ env.RELEASE_TAG }})"
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
